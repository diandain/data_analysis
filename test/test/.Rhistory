table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',header = 'T')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', header = 'T')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
head(table)
str(table)
row.names(table)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', row.name='F')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', row.name=F)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', row.names=F)
names(table)
remove.table=table[,-c(1)]
names(table)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
remove.table = table[, - c(1)]
names(table)
write.table(table, file='Z:/gongxiang/ign.csv',sep = ',', row.names =  F)
file <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(file)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
remove.table = table[, - c(1)]
names(table)
write.table(table, file = 'Z:/gongxiang/ign.csv', sep = ',', row.names = F)
file <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(file)
names(file)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)
names(table)[1] <-c('plot.id')
names(table)
str(table)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)
names(table)[1] <-c('plot.id')
names(table)
str(table)
attach(table)
game_year<-aggregate(table[7],table[9])
game_year<-aggregate(table[7],table[9],summary)
head(game_year)
hist(game_year)
summary(game_year)
names(game_year)
plot(release_year,type='h', lwd=15, lend=2)
plot(genre,release_year,type='h', lwd=15, lend=2)
plot(game_year$genre, game_year$release_year,type='h', lwd=15, lend=2)
barplot(game_year$genre, game_year$release_year,xlab='genre',ylab='year', col='blue',border='red')
barplot(game_year$genre, names.arg=game_year$release_year,xlab='genre',ylab='year', col='blue',border='red')
barplot(game_year$release_year, names.arg=game_year$genre,xlab='genre',ylab='year', col='blue',border='red')
barplot(game_year$release_year, game_year$genre,xlab='genre',ylab='year', col='blue',border='red')
barplot(game_year$genre,game_year$release_year,xlab='genre',ylab='year', col='blue',border='red')
barplot(game_year$genre,game_year$release_year,xlab='genre',ylab='year', col='red')
barplot(game_year$genre,xlab='genre',ylab='year', col='red')
install.packages(fit)
install.packages(car)
library(car)
library('car')
install.packages('car')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)
names(table)[1] <-c('plot.id')
attach(table)
game_year<-aggregate(table[7],table[9],summary)
names(game_year)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)
names(table)[1] <-c('plot.id')
attach(table)
names(table)
names(table$genre)
head(table$genre)
summary(table$genre)
barplot(summary(table$genre), xlab = 'genre', ylab = 'num', col = 'red')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)
names(table)[1] <-c('plot.id')
attach(table)
head(genre)
summary(table$genre)
barplot(summary(genre), xlab = 'genre', ylab = 'num', col = 'red')
summary(genre)
scatterplot(summary(genre) ~ year, data = table, spread = FALSE, smooth.arg = list(Ity=2),pchisq=19,maintainer='xxx',xlab='genre',ylab='year')
library('car')
scatterplot(summary(genre) ~ year, data = table, spread = FALSE, smooth.arg = list(Ity=2),pchisq=19,maintainer='xxx',xlab='genre',ylab='year')
scatterplot(summary(genre) ~ release_year, data = table, spread = FALSE, smooth.arg = list(Ity = 2), pchisq = 19, maintainer = 'xxx', xlab = 'genre', ylab = 'year')
sutable<-aggregate(table[7],table[9],summary)
head(sutable)
scatterplot(summary(table$genre) ~ sutable$release_year, data = table, spread = FALSE, smooth.arg = list(Ity = 2), pchisq = 19, maintainer = 'xxx', xlab = 'genre', ylab = 'year')
scatterplot(summary(table$genre) ~ sutable$release_year, spread = FALSE, smooth.arg = list(Ity = 2), pchisq = 19, maintainer = 'xxx', xlab = 'genre', ylab = 'year')
install.packages("lm")
t <- lm(summary(table$genre) ~ sutable$release_year)
barplot(summary(genre) ~ sutable$release_year, xlab = 'genre', ylab = 'num', col = 'red')
barplot(sutable$genre.Sports ~ sutable$release_year, xlab = 'genre', ylab = 'num', col = 'red')
scatterplot(sutable$genre.Sports ~ sutable$release_year, data=sutable, spread = FALSE, smooth.arg = list(Ity = 2), pchisq = 19, maintainer = 'xxx', xlab = 'genre', ylab = 'year')
head(sutable$genre.Sports)
head(sutable$genre)
head(sutable$genre.Racing Flight)
head(sutable$genre.Racing_Flight)
head(sutable$genre.Racing)
head(sutable$Racing Flight)
head(sutable$Racing)
str(sutable$genre)
str(sutable$genre.Adventure)
head(sutable$genre.Adventure)
head(sutable$genre$Adventure)
head(sutable$genre)
scatterplot(sutable$genre ~ sutable$release_year, data=sutable, spread = FALSE, smooth.arg = list(Ity = 2), pchisq = 19, maintainer = 'xxx', xlab = 'genre', ylab = 'year')
barplot(sutable$genre ~ sutable$release_year, xlab = 'genre', ylab = 'num', col = 'red')
install.packages('ggplot')
library('ggplot')
install.packages('ggplot2')
library('ggplot2')
library('ggplot')
library('ggplot2')
library('ggplot2')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
attach(table)
head(genre)
summary(genre)
sutable <- aggregate(table[7], table[9], summary)
head(sutable)
ggplot(sutable,aes(genre,fill=factor(release_year)))+geom_bar()
ggplot(sutable,aes(genre,fill=release_year))+geom_bar()
ggplot(sutable,aes(genre))+geom_bar()
ggplot(table,aes(genre))+geom_bar()
head(genre)
ggplot(table,aes(genre,fill=release_year))+geom_bar()
ggplot(table,aes(genre))+geom_histogram()
ggplot(table,aes(genre,stat='count'))+geom_histogram()
ggplot(sutable,aes(genre))+geom_histogram()
ggplot(table,aes(summary(genre)))+geom_histogram()
ggplot(table,aes(genre,color=release_year))+geom_density()
head(genre)
head(table)
ggplot(table, aes(score_phrase, fill = release_year)) + geom_bar()
summary(score_phrase)
ggplot(table, aes(score_phrase, color = release_year)) + geom_bar()
ggplot(table, aes(score_phrase, color = release_year)) + geom_density()
ggplot(table, aes(score_phrase, fill = release_year)) + geom_density()
ggplot(table, aes(score_phrase, color = release_year)) + geom_bar()
ggplot(table, aes(score_phrase, color = release_year)) + geom_bar()
ggplot(table, aes(genre, color = release_year)) + geom_bar()
ggplot(table, aes(score_phrase, color = release_year)) + geom_bar()
ggplot(table, aes(score_phrase, color = release_year)) + geom_histogram()
ggplot(table, aes(score, color = release_year)) + geom_bar()
ggplot(table, aes(score)) + geom_barhistogram(stat='density')
ggplot(table, aes(score)) + geom_histogram(stat='density')
data<-as.data.frame(table)
ggplot(data, aes(score)) + geom_histogram(stat = 'density')
install.packeges('pastecs')
install.packages('pastecs')
library('pastecs')
ggplot(data, aes(score)) + geom_histogram(stat = 'density')
library('pastecs')
ggplot(data, aes(score)) + geom_histogram(stat = 'density')
stat.desc(table)
ggplot(data, aes(factor(score_phrase), fill = release_year)) + geom_density()
ggplot(data, aes(factor(score_phrase), fill = factor(release_year))) + geom_density()
ggplot(data, aes(factor(score_phrase), fill = factor(release_year))) + geom_density()
ggplot(data, aes(factor(score),fill=factor(release_year))) + geom_bar()
summary(score)
head(table)
count(score)
ggplot(data, aes(factor(score_phrase), fill = factor(release_year))) + geom_density()
ggplot(data, aes(factor(genre))) + geom_histogram(stat = 'density')
tablegenere)
table(genere)
table(genre)
ggplot(data, aes(factor(a))) + geom_histogram(stat = 'density')
ggplot(data, aes(factor(a))) + geom_histogram()
ggplot(data, aes(a)) + geom_histogram()
a
a < - table(table$genre)
a <-table(table$genre)
a
ggplot(data, aes(a)) + geom_histogram()
ggplot(data, aes(factor(a))) + geom_histogram()
ggplot(data, aes(factor(a))) + geom_line()
ggplot(data, aes(factor(genre))) + geom_line()
ggplot(data, aes(factor(genre))) + geom_histogram()
ggplot(data, aes(factor(genre))) + geom_histogram(stat = 'count')
a <-table(table$genre)
a
ggplot(data, aes(factor(genre), fill = factor(release_year))) + geom_density()
ggplot(data, aes(factor(genre), fill = factor(release_year))) + geom_density()
ggplot(data, aes(factor(genre), fill = factor(release_year))) + geom_bar()
)
)
ggplot(data, aes(factor(genre), fill = factor(release_year))) + geom_bar()
ggplot(data, aes(factor(genre), fill = factor(release_year))) + geom_bar()
ggplot(data, aes(factor(score))) + geom_histogram()
data<-as.data.frame(table)
ggplot(table, aes(factor(score))) + geom_histogram()
table(table$genre)
str(a)
b<- subset(a,a>100)
b
b<- subset(a,a>1000)
b
sort(b)
b<- sort(subset(a,a>1000))
b
array<- array[1:5]
array<- b[1:5]
array
ggplot(table, aes(x=factor(array))) + geom_histogram()
ggplot(table, aes(array)) + geom_histogram()
ggplot(data, aes(factor(array), fill = factor(release_year))) + geom_bar()
ggplot(data, aes(factor(array))) + geom_bar()
ggplot(data, aes(array)) + geom_bar()
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar()
ggplot(data, aes(factor(genre),fill=factor(release_year))) + geom_bar()
ggplot(data, aes(factor(genre),fill=factor(release_year))) + geom_bar(stat = 'count')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
ggplot(data, aes(factor(release_year),factor(genre),fill=factor(genre))) + geom_bar()
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
install.packages('ggplot2')
library('ggplot2')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
attach(table)
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
install.packages('ggplot2')
library('ggplot2')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
ggplot(data, aes(factor(genre), fill = factor(release_year))) + geom_bar()
attach(table)
head(table)
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
data<-as.data.frame(table)
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+annotate('text',x=genre,y=release_year,label='The Number of Game Genre in 20 Years')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+annotate('text',x=genre,y=release_year,label='The Number of Game Genre in 20 Years')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+annotate('text',x=genre,y=release_year,label='The Number of Game Genre in 20 Years')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+labels(title='The Number of Game Genre in 20 Years',x='genre',y='release_year')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+labels(object='The Number of Game Genre in 20 Years',x='genre',y='release_year')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+labels(title='The Number of Game Genre in 20 Years',x='genre',y='release_year')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+labs(title='The Number of Game Genre in 20 Years',x='genre',y='release_year')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+labs(title='The Number of Game Genre in 20 Years',x='release_year',y='genre')
ggplot(data, aes(factor(release_year),fill=factor(genre))) + geom_bar(stat = 'count')+labs(title='The Number of Game Genre in 20 Years',x='release_year',y='genre')
ggplot(data, aes(factor(release_year), fill = factor(platform))) + geom_bar(stat='count')
ggplot(data, aes(factor(release_year), fill = factor(platform))) + geom_bar(stat='count')+labs(title='The Number of Game Platform in 20 Years',x='release_year',y='platform')
ggplot(table, aes(x=factor(table(score)))) + geom_histogram()
install.packages('ggplot2')
ggplot(data, aes(x=factor(table(score)))) + geom_histogram()
ggplot(data, aes(factor(release_year),fill=factor(genre),colors='black')) + geom_bar(stat = 'count')+labs(title='The Number of Game Genre in 20 Years',x='release_year',y='genre')
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_density(stat = 'count') + labs(title = 'The Number of Game Genre in 20 Years', x = 'release_year', y = 'genre')
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_density(stat = 'count') + labs(title = 'The Number of Game Genre in 20 Years', x = 'release_year', y = 'genre')
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_density(stat = 'count') 
b<- sort(subset(table,table(genre)>1000))
b<- sort(subset(table,table(table$genre)>1000))
c<-table(platform)
c
ggplot(data, aes(factor(release_day), fill = factor(genre))) + geom_line(stat = 'identity') 
ggplot(data, aes(factor(release_day), fill = factor(genre))) + geom_line(stat = 'identity') 
ggplot(data, aes(x=factor(release_day), y=factor(genre),fill = factor(genre))) + geom_line(stat = 'identity') 
ggplot(data, aes(x=factor(release_day), y=factor(genre),fill = factor(genre))) + geom_line(stat = 'identity') 
ggplot(data, aes(factor(genre)))) + geom_pie()
ggplot(data, aes(factor(genre)))) + geom_pie()
ggplot(data, aes(factor(genre))) + geom_pie()
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count')+coord_polar(theta = 'y')
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count')+coord_polar(theta = 'y')
ggplot(data, aes(x='',y=factor(genre), fill = factor(release_year))) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
ggplot(data, aes(x='',y=factor(genre)))) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
ggplot(data, aes(x='',y=factor(genre)))) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
ggplot(data, aes(x='',y=factor(genre)))) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
ggplot(data, aes(x='',y=factor(genre))) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
ggplot(data, aes(x='',y=factor(genre))) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
+ labs(title = 'The Number of Game Genre in 20 Years', x = 'release_year', y = 'genre')
ggplot(data, aes(x='',y=genre)) + geom_bar(stat = 'identity',width = 1)+coord_polar(theta = 'y')
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count', colours = 'black') 
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count', colour = 'black') 
ggplot(data, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count', colour = 'black') 
table(release_year)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
attach(table)
head(table)
table(release_year)
num_game<-table(release_year)
summm(score,by=release_year)
summmary(score,by=release_year)
summary(score,by=release_year)
summary(score,release_year)
aggregate(score,release_year,mean)
data <- as.data.frame(table)
aggregate(score,release_year,mean)
head(table)
aggregate(table[6],table[9],mean)
aggregate(table[11],table[9],table(table[11]))
num_game<-table(release_year)
table(release_year)
averaggregate(table[6],table[9],mean)
table(release_year)
aggregate(table[6],table[9],mean)
table2 <- read.csv('z:/gongxiang/vgsales.csv',sep=',')
head(table2)
head(table2)
for (i in table$title) {     for (j in table2$Name)         i=j }
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
table2 <- read.csv('z:/gongxiang/vgsales.csv',sep=',')
for (i in table$title) {     for (j in table2$Name)         i=j }
head(i)
?merge
D<-merge(table,table2,by.x=table$title,by.y=table2$Name,all.x=FALSE)
D<-merge(table,table2,by.x=table$title,by.y=table2$Name,all=FALSE)
head(table)
table(score_phrase)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
attach(table)
head(table)
table(score_phrase)
class(table)
sort(score_phrase)
sort(table(score_phrase))
sort(table(score_phrase))
for (i in table$score_phrase) {     i( 'Disaster','Painful','Awful', 'Bad', 'Mediocre', 'Okay', 'Good', 'Great', 'Amazing',  'Masterpiece', 'Unbearable') }
i<-c('1','2','3','4','5','6','7','8','9')
for (i in table$score_phrase) {     i== 'Disaster','Painful','Awful', 'Bad', 'Mediocre', 'Okay', 'Good', 'Great', 'Amazing',  'Masterpiece', 'Unbearable' }
i<-c('1','2','3','4','5','6','7','8','9')
sort(table(score_phrase))
score_phrase[score_phrase=='Disaster']<-1
factor(score_phrase[score_phrase=='Disaster'])<-1
table$score_phrase[table$score_phrase=='Disaster']<-1
table$score_phrase[table$score_phrase=='Disaster',]<-1
table[table$score_phrase=='Disaster',]<-1
table[table$score_phrase=='Disaster',]$score_phrase<-1
table[table$score_phrase=='Disaster',]$score_phrase<-1
table[table$score_phrase=='Disaster',]$score_phrase=1
table$score_phrase[table$score_phrase=='Disaster']<-1
data<-as.data.frame(table)
data$score_phrase[data$score_phrase=='Disaster']<-1
data<-as.data.frame(table,stringsAsFactors=FALSE)
data$score_phrase[data$score_phrase=='Disaster']<-1
data<-as.data.frame(table,stringsAsFactors=FALSE)
data$score_phrase[data$score_phrase=='Disaster']<-1
data$score_phrase[data$score_phrase=='Good']<-1
head(data$score_phrase)
table(data$score_phrase)
table(score_phrase)
sort(table(score_phrase))
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
attach(table)
head(table)
sort(table(score_phrase))
table(score_phrase)
class(table)
table(score_phrase=='Disaster')
table(score_phrase=='Good')
score_phrase[score_phrase == 'Good'] <- 1
table(score_phrase)
table(score_phrase=1)
table(score_phrase == 1)
attach(table)
head(table)
table(score_phrase=='Good')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',')
names(table)[1] <-c('plot.id')
attach(table)
head(table)
table(score_phrase=='Good')
score_phrase[score_phrase == 'Disaster'] <- '1'
table(score_phrase)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringAsFactors=FALSE)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringSAsFactors=FALSE)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
names(table)[1] <-c('plot.id')
attach(table)
head(table)
table(score_phrase)
score_phrase[score_phrase == 'Disaster'] <- '1'
table(score_phrase)
score_phrase[score_phrase == 'Disaster'] <- 1
table(score_phrase)
score_phrase[score_phrase == 'Disaster'] <- 1
table(score_phrase == 1)
score_phrase[score_phrase == 'Painful'] <- 2
score_phrase[score_phrase == 'Awful'] <- 3
score_phrase[score_phrase == 'Bad'] <- 4
score_phrase[score_phrase == 'Mediocre'] <- 5
score_phrase[score_phrase == 'Okay'] <- 6
score_phrase[score_phrase == 'Good'] <- 7
score_phrase[score_phrase == 'Great'] <- 8
score_phrase[score_phrase == 'Amazing'] <- 9
score_phrase[score_phrase == 'Unbearable'] <- 10
score_phrase[score_phrase == 'Masterpiece'] <- 11
table(score_phrase)
num_game<-table(release_year)
table(release_year)
aver_score<-aggregate(table[6],table[9],mean)
aggregate(table[6],table[9],mean)
aggregate(table[5],table[9],summary)
tapply(release_year,platform,function(t) length(unique(t)))
table(factor(platform))
summary(factor(platform))
aggregate(factor(table[5]),table[9],summary)
aggregate(table[5],table[9],count)
tapply(platform,release_year,table)
ggplot2(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar()
library('ggplot2')
ggplot2(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar()
install.packages('ggplot2')
library('ggplot2')
ggplot2(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar()
ggplot(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar()
plyear<-tapply(platform,release_year,table)
ggplot(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar()
plyear<-as.data.frame(plyear)
ggplot(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar()
ggplot(plyear,aes(factor(plyear$release_year),fill=factor(plyear$platform)))+geom_bar(stat = 'count')
ggplot(plyear,aes(plyear$release_year,fill=plyear$platform))+geom_bar(stat = 'count')
+ labs(title = 'The Number of Game Genre in 20 Years', x = 'release_year', y = 'genre')
ggplot(data, aes(factor(release_year), fill = factor(platform))) + geom_bar(stat='count')+labs(title='The Number of Game Platform in 20 Years',x='release_year',y='platform')
ggplot(table, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count', colour = 'black') 
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
names(table)[1] <-c('plot.id')
attach(table)
head(table)
ggplot(table, aes(factor(release_year), fill = factor(genre))) + geom_bar(stat = 'count', colour = 'black') 
ggplot(plyear,aes(plyear$release_year,fill=plyear$platform))+geom_bar()
ggplot(plyear,aes(plyear$release_year))+geom_bar()
ggplot(plyear,aes(factor(plyear$release_year)))+geom_bar()
plyear
install.packages('car')
library('car')
 fit<-lm(platform~score,data = table)
 fit<-lm(factor(platform)~factor(score),data = table)
 fit<-lm(factor(platform)~score,data = table)
 fit<-lm(platform~score,data = table)
aggregate(score,platform,mean)
head(table)
aggregate(table[6],table[5],mean)
fit<-lm(platform~score,data = a)
a<- aggregate(table[6],table[5],mean)
fit<-lm(platform~score,data = a)
attach(a)
fit<-lm(a$platform~a$score,data = a)
ggplot(table, aes(x=factor(a$platform), y = factor(a$score))) + geom_point()
ggplot(a, aes(x=factor(a$platform), y = factor(a$score))) + geom_point()
ggplot(a, aes(factor(a$platform), fill = factor(a$score))) + geom_bar()
ggplot(a, aes(factor(a$score), fill = factor(a$platform))) + geom_bar()
plot(a$score~a$platform,data=a)
plot(factor(a$score)~factor(a$platform),data=a)
aggregate(table[6], table[5], mean)
ggplot(table, aes(factor(a$platform)), y = factor(a$score))) + geom_point()+geom_line()
ggplot(a, aes(factor(a$platform)), y = factor(a$score))) + geom_point()+geom_line()
ggplot(a, aes(x=factor(a$platform)), y = factor(a$score))) + geom_point()+geom_line()
ggplot(a, aes(x=factor(a$platform), y = factor(a$score))) + geom_point()+geom_line()
levels(a$platform)
levels(platform)
levels(factor(platform))
levels(factor(score))
reg=lm(x~platform+score,data=table)
reg=lm(score~platform,data=table)
summary(reg)> summary(reg)
summary(reg)
lm(formula = score~platform,date=table)
lm(formula = score~platform,data=table)
summary(reg)
plot(reg)
plot(reg)
reg1 = lm(platform~ score, data = table)
summary(reg1)
summary(reg1)
summary(reg1)
reg1 = lm(platform~ score, data = table)
reg1 = lm(platform ~ score, data = table)
reg = lm(score ~ platform, data = table)
summary(reg)
str(genre)
str(factor(genre))
genre<-factor(genre)
test<-lm(score~genre,data=table)
coef(summary(test))
anova(test)
t.test(table$score)
t.test(table$score)
t.test(table$score)
x<-dnorm(table$score,0.1)
ggplot(data = NULL,aes(score,x))+geom_line(color='darked')
ggplot(data = NULL,aes(factor(score),x))+geom_line(color='darked')
summary(factor(platform))
table(platform)
c<-table(platform)
c
plyear <- tapply(platform, release_year, table)
plyear <- tapply(platform, release_year, table)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
plyear <- tapply(platform, release_year, table)
attach(table)
plyear <- tapply(platform, release_year, table)
plyear
plyear <- tapply(platform, score,release_year, table)
plyear <- tapply(platform,release_year, table)
plyear
aa<-tapply(score,release_year,table)
tapply(score,release_year,table)
aa<-tapply(score,release_year,table)
aa
aa<-tapply(score,release_year,mean)
tapply(score,release_year,mean)
cd <- merge(plyear,aa,by=release_year)
cd <- merge(plyear,aa,by='release_year')
str(plyear)
plyear <- as.data.frame(plyear)
str(plyear)
list(plyear)
names(plyear)
names(aa)
aa <- as.data.frame(tapply(score, release_year, mean))
names(aa)
aa <- tapply(score, release_year, mean)
aa<- as.data.frame(aa)
names(aa)
cd <- merge(plyear,aa,by='[1]')
rename(aa)<-c('year','score')
names(aa)<-c('year','score')
names(aa)[1]<-c('year')
names(aa)
plyear <- as.data.frame(plyear)
list(plyear)
aa <- tapply(score, platform, mean)
aa
list(aa)
plyear <- tapply(score, platform, mean)
plyear <- as.data.frame(plyear)
list(plyear)
aa <- tapply(platform, release_year, table)
list(plyear)
aver_score <- aggregate(table[6], table[5], mean)
aggregate(table[6], table[5], mean)
plot(score~platform,data=aver_score)
ggplot(aver_score,aes(factor(aver_score$platform)),fill=aver_score$score)+geom_bar()
test <- lm(score ~ genre, data = table)
genre <- factor(genre)
reg2 <- lm(score ~ genre, data = table)
summary(reg2)
lm(formula = score ~ genre, data = table)
plot(reg2)
plot(reg2)
summary(reg)
reg = lm(score ~ platform, data = table)
summary(reg)
lm(formula = score ~ platform, data = table)
plot(reg)
reg = lm(score ~ platform, data = table)
reg = lm(score ~ platform, data = table)
summary(reg)
lm(formula = score ~ platform, data = table)
plot(reg)
reg2 <- lm(score ~ genre+platform, data = table)
reg2 <- lm(score ~ genre+platform, data = table)
reg2 <- lm(score ~ genre+platform, data = table)
summary(reg2)
lm(formula = score ~ genre+platform, data = table)
source("C:/Users/kusano/Source/Repos/data_analysis/test/test/script.R", encoding = "Windows-1252")
install.packages('car')
library('car')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
reg2 <- lm(score ~ factor(genre)+factor(platform), data = table)
summary(reg2)
plot(reg2)
reg2
reg2
reg2 <- glm(score ~ factor(genre) + factor(platform), data = table)
reg2
reg2
lm(formula = score ~ factor(genre) + factor(platform), data = table)
head(table)
head(list(table))
head(list(table))
head(table)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
names(table)[1] <-c('plot.id')
attach(table)
head(table)
head(genre,score)
plyear <- tapply(score, genre, mean)
tapply(score, genre, mean)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
attach(table)
x<-table$score
y<-dnorm(x,0,1)
ggplot(data = NULL,aes(x,y))+geom_line(color='black')
library('ggplot2')
ggplot(data = NULL,aes(x,y))+geom_line(color='black')
scale(score) * sd + mean
t.test(table$score)
t.test(table)$statistic
t.test(score)$statistic
cor.test(score,platform,method='pearson')
cor(score,platform)
cor(platform,score)
install.packages('pastecs')
library('pastecs')
#describe the range of score
#show the number of values, null values, missing values, 
#min,max,range and sum.
stat.desc(table$score, norm = FALSE)
ggplot(table,aes(platform))+geom_histogram(stat = 'density')
aggregate(score,by=list(platform),FUN=mean)
aggregate(score,by=list(platform),FUN=sd)
fit=aov(score~platform,data=table)
summary(fit)
aggregate(score, by = list(genre), FUN = mean)
aggregate(score, by = list(genre), FUN = sd)
fit2 = aov(score ~ genre, data = table)
summary(fit2)
boxplot(score~platform,data=table)
reg = lm(score ~ platform, data = table)
summary(reg)
lm(formula = score ~ platform, data = table)
rsq<-summary(reg)$r.squared
rsq
sqrt(rsq)
print(reg$fitted)
cor(score,reg$fitted)
plot(x = reg$fitted, y = score, xlab = 'fitted score', ylab = 'observed score')
abline(lm(score~reg$fitted),col='red')
summary(reg)
summary(table[data])
data <- c('score', 'platform', 'genre')
head(table[data])
#summary this columns
summary(table[data])
library(Hmisc)
install.packages('Hmisc')
library(Hmisc)
#describe the numerical variable score
describe(table$score)
install.packages('pastecs')
library('pastecs')
#describe the range of score
#show the number of values, null values, missing values, 
#min,max,range and sum.
stat.desc(table$score, norm = FALSE)
install.packages('doBy')
library(doBy)
mystats <- function(x, na.omit = FALSE) {     if (na.omit)         x <- x[!is.na(x)]     m <- mean(x)     n <- length(x)     s <- sd(x)     skew <- sum((x - m) ^ 3 / s ^ 3) / n     kurt <- sum((x - m) ^ 4 / s ^ 4) / n - 3     return(c(n = n, mean = m, stdev = s, skew = skew, kurtosis = kurt)) }
summaryBy(score ~ platform, data = table, FUN = mystats)
describeBy(table['score'],list(playform=platform))
install.packages('psych')
install.packages('psych')
library(psych)
#list the mean of score by game platform and genre
aggregate(table['score'],by=list(platform=table$platform),mean)
aggregate(table['score'], by = list(genre = table$genre), mean)
#show the summary result
mystats <- function(x, na.omit = FALSE) {     if (na.omit)         x <- x[!is.na(x)]     m <- mean(x)     n <- length(x)     s <- sd(x)     skew <- sum((x - m) ^ 3 / s ^ 3) / n     kurt <- sum((x - m) ^ 4 / s ^ 4) / n - 3     return(c(n = n, mean = m, stdev = s, skew = skew, kurtosis = kurt)) }
ds<-function(x) sapply(x,mystats)
by(table['score'], table$platform, ds)
by(table['score'], table$genre, ds)
describeBy(table['score'],list(playform=platform))
describeBy(table['score'], list(genre = genre))
t.test(table$score)
install.packages('Pastecs')
install.packages('pastecs')
library(pastecs)
stat.desc(score, basic = TRUE,norm=FALSE,P=0.95)
stat.desc(score, basic = TRUE,norm=FALSE,p=0.95)
tapply(score,platform,mean)
a<-tapply(score,platform,mean)
a
list(a)
plot(a)
summary(a)
plot(a)
b<-tapply(score,release_year)
b
b <- tapply(score, release_year,mean)
b
summary(b)
plot(b)
c<-b[,2]
c<-b[2]
c
c <- b[2,]
c <- as.data.frame(b)
c
d<-c[,2]
d<-c[2]
plot(c)
names(c)
time<-ts(c)
time
time<-ts(c,frequency=12,start=c(1970,21))
time
time<-ts(c,frequency=1,start=c(1970,21))
time
time<-ts(c,frequency=1,start=c(1970,1))
time
plot.ts(time)
time <- ts(c, frequency = 1, start = c(1970, 21))
plot.ts(time)
b <- tapply(score, release_year+release_month,mean)
b
b <- tapply(score, release_month,mean)
b
b
summary(b)
plot(b)
c <- as.data.frame(b)
names(c)
time <- ts(c, frequency = 1, start = c(1970, 21))
plot.ts(time)
time <- ts(c, frequency = 12,start= c(1,1))
plot.ts(time)
time <- ts(score,frequncy=12,start=c(1970,1))
time <- ts(score,frequency=12,start=c(1970,1))
plot.ts(time)
b <- tapply(score, release_day,mean)
summary(b)
plot(b)
c <- as.data.frame(b)
names(c)
time <- ts(c,frequency=12,start=c(1970,1))
plot.ts(time)
time <- ts(c,frequency=12,start=c(1970,2))
plot.ts(time)
time <- ts(c,frequency=12,start=c(1970,3))
plot.ts(time)
plot.ts(time)
time <- ts(c,frequency=24,start = c(1970,1))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,1))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,21))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,10))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,13))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,15))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,17))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,20))
plot.ts(time)
time <- ts(c,frequency=1,start = c(1970,18))
plot.ts(time)
time
time <- ts(c,frequency=1,start = c(1970),end = (2016))
time
plot.ts(time)
b <- tapply(score, release_year,mean)
summary(b)
plot(b)
c <- as.data.frame(b)
names(c)
time <- ts(c,frequency=1,start = c(1970),end = (2016))
plot.ts(time)
a<- tapply(score, release_year,mean)
summary(a)
plot(a)
b<- as.data.frame(a)
time <- ts(b,frequency=1,start = c(1970),end = (2016))
plot.ts(time)
scoreforecasts<- HoltWinters(score,beta=FALSE,gamma=FALSE)
scoreforecasts
time <- ts(score,frenquency=1,start = c(1970),end=c(2016))
plot.ts(time)
time <- ts(score,frequency=1,start = c(1970),end=c(2016))
plot.ts(time)
scoreforecasts<- HoltWinters(a,beta=FALSE,gamma=FALSE)
scoreforecasts
scoreforecasts
prop.test(score)
prop.test(score,correct=F)
chisq.test(table)
chisq.test(list(table))
cor-test(score,platform)
cov(table)
summary(reg)
t.test(table$score)
install.packages('caret')
library('caret')
cor-test(score,platform)
cor.test(score,platform)
cor.test(platform,score)
scoreforecasts$fitted
plot(scoreforecasts)
a<- tapply(score, release_year,mean)
summary(a)
plot(a)
b<- as.data.frame(a)
time <- ts(b, frequency = 1, start = c(1970), end = (2016))
plot.ts(time)
#prodict the futher score
scoreforecasts <- HoltWinters(a, beta = FALSE, gamma = FALSE)
scoreforecasts
scoreforecasts$fitted
plot(scoreforecasts)
plat<-tapply(platform,release_year,table)
plat
summary(plat)
plot(plat)
plat<-as.data.frame(plat)
plat<-as.data.frame(plat)
plat
table(plat)
plat<-as.data.frame(plat)
plat<-as.data.frame(plat)
table(plat)
table(release_year)
num<-table(release_year)
num<-table(release_year)
num
plot(num)
timepl<-ts(num,frequency=1,start(1970),end=(2016))
plot.ts(timepl)
num<-as.data.frame(num)
plot(num)
timepl <- ts(num, frequency = 1, start(1970), end = (2016))
plot.ts(timepl)
aareg<-num[2]
aareg
plot(aa)
aar<-num[2]
plot(aa)
num <- as.data.frame(num)
aar<-num[2]
plot(aa)
num <- as.data.frame(num)
aa<-num[2]
plot(aa)
aa<-num[2]
aa
plot(aa)
timepl <- ts(aa,frequency = 1, start(1970), end = (2016))
plot.ts(timepl)
Summary(aa)
summary(aa)
plot(aa)
aggregate(score, by = list(platform), FUN = mean)
aggregate(score, by = list(platform), FUN = sd)
fit = aov(score ~ platform, data = table)
summary(fit)
#perform a multiple regression
levels(factor(platform))
levels(factor(score))
reg = lm(score ~ platform, data = table)
summary(reg)
aggregate(score, by = list(platform), FUN = mean)
b$sd_score<-tapply(score,release_year,sd)
b
mean_score<- tapply(score, release_year,mean)
summary(mean_score)
plot(mean_score)
b<- as.data.frame(mean_score)
b<- as.data.frame(mean_score)
time <- ts(b, frequency = 1, start = c(1970), end = (2016))
plot.ts(time)
scoreforecasts <- HoltWinters(a, beta = FALSE, gamma = FALSE)
scoreforecasts
scoreforecasts$fitted
plot(scoreforecasts)
scoreforecasts <- HoltWinters(mean_score,beta = FALSE, gamma = FALSE)
scoreforecasts
scoreforecasts$fitted
plot(scoreforecasts)
b$sd_score <- tapply(score, release_year, sd)
b
b$num<-table(release_year)
b
head(table)
b$day<-tapply(release_day,release_year,table)
b
b$day <- tapply(release_day, release_year, mean)
b
game_year<-b
game_year
b$sd_score <- tapply(score, release_year, sd)
b$num_game<- table(release_year)
b$day <- tapply(release_day, release_year, mean)
game_year<-b
game_year
summary(game_year)
mean_score<- tapply(score, release_year,mean)
summary(mean_score)
plot(mean_score)
b<- as.data.frame(mean_score)
b$sd_score <- tapply(score, release_year, sd)
b$num_game<- table(release_year)
b$day <- tapply(release_day, release_year, mean)
game_year<-b
summary(game_year)
plot(game_year)
time_gameday<-ts(b$day,frequency=1,start=c(1970),end=c(2016))
plot(time_gameday)
game_year
plot(b$day)
reg = lm(score ~ platform, data = table)
summary(reg) 
head(platform)
head(sort(platform))
table(platform)
aggregate(score, by = list(platform), FUN = mean)
rsq<-summary(reg)$r.squared
rsq
sqrt(rsq)
cor(score, reg$fitted)
cor(score, reg$fitted)
plot(x = reg$fitted, y = score, xlab = 'Fitted score', ylab = 'Observed score')
abline(lm(score~reg$fitted),col='red')
library(heplots)
install.packages('heplots')
library(heplots)
model.aov<-aov(score~platform,data=table)
summary(model.aov)
estasq(model.aov,partial.r=FALSE)
print(model.aov$fitted.values)
etasq(model.aov,partial.r=FALSE)
etasq(model.aov,partial=FALSE)
etasq(model.aov, partial = TRUE)
aggregate(score, by = list(platform), FUN = mean)
aggregate(score, by = list(platform), FUN = sd)
fit = aov(score ~ platform, data = table)
summary(fit)
model.aov<-aov(score~platform,data=table)
summary(model.aov)
d<-density(table$score)
plot(d)
#from summary information, the results show mean score is 6.95
#add the score mean line in graph
abline(v = 6.95, col='red')
b<-aggregate(score,platform,table)
d
y<-dnorm(table$score)
y
y<-dnorm(score)
y
pred<-predict(reg,interval='confidence',newdata=table,level=0.95)
x <- score
y <- dnorm(x, mean(score), sd(score))
ggplot(data = NULL,aes(x,y))+geom_line(color='blue')
a1<-qnorm((1-c_level)/2)
c_level = 0.95
a1<-qnorm((1-c_level)/2)
 +geom_vline(xintercept = a1)+geom_vline(xintercept = -a1)
a1
geom_vline(xintercept = a1)
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue') + geom_vline(xintercept = 0)+geom_vline(xintercept = a1)+geom_vline(xintercept = -a1)
mean(score)
qnorm((1-c_level)/2)
c_level<-0.95
a1<-qnorm((1-c_level)/2)
a1
y <- dnorm(x, 0,1)
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')
y <- dnorm(x, mean(score), sd(score))
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')
plot(b$day)
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')
install.packages('forecast')
library('forcast')
library('forecast')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',',stringsAsFactors=FALSE)
attach(table)
x<-table$score
y<-dnorm(x,0,1)
ggplot(data = NULL,aes(x,y))+geom_line(color='black')
library('ggplot2')
x<-table$score
y<-dnorm(x,0,1)
ggplot(data = NULL,aes(x,y))+geom_line(color='black')
x <- score
y <- dnorm(x, mean(score), sd(score))
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')
head(score)
hist(x)
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')
cor(score, reg$fitted)
plot(x = reg$fitted, y = score, xlab = 'Fitted score', ylab = 'Observed score')
hist(x)
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')+hist(x)
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')
ggplot(data = NULL, aes(x, y)) + geom_line(color = 'blue')+geom_histogram(x)
reg1 = lm(score ~ genre, data = table)
summary(reg1)
lm(formula = score ~ genre, data = table)
plot(reg1)
#part of the coefficient of determination R^2=0.0508
#One interpretation of this is that our model explains 68% of variance in conversation duration. 
#Another interpretation of R^2 is that by square-rooting, we can find the multiple correlation coefficent R.
rsq1 <- summary(reg1)$r.squared
rsq1
#0.2255 isn't the correlation between game score and game platform
sqrt(rsq)
#the fitted values are the mean durations for each group
print(reg1$fitted)
#check the Pearson correlation between observed and fitted value
cor(score, reg1$fitted)
plot(x = reg1$fitted, y = score, xlab = 'Fitted score', ylab = 'Observed score')
abline(lm(score ~ reg1$fitted), col = 'red')
hist(x)
min(score)
max(score)
b$sd_score <- tapply(score, release_year, sd)
mean_score<- tapply(score, release_year,mean)
summary(mean_score)
plot(mean_score)
b<- as.data.frame(mean_score)
time <- ts(b, frequency = 1, start = c(1970), end = (2016))
plot.ts(time)
b$sd_score <- tapply(score, release_year, sd)
b$num_game<- table(release_year)
b$day <- tapply(release_day, release_year, mean)
game_year<-b
summary(game_year)
plot(game_year)
time_gameday <- ts(b$day, frequency = 1, start = c(1970), end = c(2016))
plot(time_gameday)
plot(x)
length(table)
length(score)
scoreforecasts <- HoltWinters(mean_score,beta = FALSE, gamma = FALSE)
scoreforecasts
scoreforecasts$fitted
plot(scoreforecasts)
aa<-aggregate(score, by = list(platform), FUN = mean)
bb<-aggregate(score, by = list(platform), FUN = sd)
plot(aa)
hist(aa)
aa
hist(aa$x)
aggregate(score, by = list(platform), FUN = mean)
aggregate(score, by = list(platform), FUN = sd)
mean_score<- tapply(score, release_year,mean)
summary(mean_score)
plot(mean_score)
b<- as.data.frame(mean_score)
time <- ts(b, frequency = 1, start = c(1970), end = (2016))
plot.ts(time)
mean_score<- tapply(score, release_year,mean)
summary(mean_score)
plot(mean_score)
b<- as.data.frame(mean_score)
time <- ts(b, frequency = 1, start = c(1970), end = (2016))
plot.ts(time)
b$sd_score <- tapply(score, release_year, sd)
b$num_game<- table(release_year)
b$day <- tapply(release_day, release_year, mean)
game_year<-b
summary(game_year)
plot(game_year)
#predict the game release day by time series
time_gameday <- ts(b$day, frequency = 1, start = c(1970), end = c(2016))
plot(time_gameday)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', stringsAsFactors = FALSE)
names(table)[1] <-c('plot.id')
attach(table)
lm(formula = score~ platform+ genre,data = table)
mean_score<- tapply(score, release_year,mean)
summary(mean_score)
plot(mean_score)
b<- as.data.frame(mean_score)
time <- ts(mean_score, frequency = 1, start = c(1970), end = (2016))
plot.ts(time)
install.packages('forecast')
b$sd_score <- tapply(score, release_year, sd)
b$num_game<- table(release_year)
b$day <- tapply(release_day, release_year, mean)
game_year <- b
plot(game_year)
lr<-lm(formula = score~ platform+ genre,data = table)
plot(lr)
data <- c('score', 'platform', 'genre')
plot(data)
cor(table)
cor(data)
library(car)
scatterplotMatrix(data,spread=FALSE,smoother.arga=list(Ity=2),maintainer='plot')
scatterplotMatrix(data,spread=FALSE,smoother.arga=list(Ity=2),main='plot')
scatterplotMatrix(data,spread=FALSE,main='plot')
scatterplotMatrix(score~platfoem+genre,data=table,spread=FALSE,main='plot')
scatterplotMatrix(~score+platfoem+genre,data=table,spread=FALSE,main='plot')
scatterplotMatrix(~score+platform+genre,data=table,spread=FALSE,main='plot')
scatterplotMatrix(score~platform+genre,data=table,spread=FALSE,main='plot')
scatterplotMatrix(~score+platform+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+platform+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(score~platform+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+platform+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+release_year,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
library(car)
library(car)
scatterplotMatrix(~score+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', stringsAsFactors = FALSE)
data <- c('score', 'platform', 'genre')
attach(table)
scatterplotMatrix(~score+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~platform+genre,data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~factor(platform)+factor(genre),data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+factor(platform)+factor(genre),data=table,spread=FALSE,lty.smooth=2,main='plot')
scatterplotMatrix(~score+factor(platform)+factor(genre),data=table,spread=FALSE,lty.smooth=2,main='scatter plot matrix')
aggregate(score, by = list(platform), FUN = mean)
aggregate(score, by = list(platform), FUN = sd)
fit = aov(score ~ platform, data = table)
summary(fit)
install.packages('heplots')
library(heplots)
model.aov<-aov(score~platform,data=table)
summary(model.aov)
print(model.aov$fitted.values)
etasq(model.aov,partial=FALSE)
etasq(model.aov, partial = TRUE)
lm(formula = score ~ factor(genre) + factor(platform), data = table)
plot(reg2)
reg2 <- lm(score ~ factor(genre) + factor(platform), data = table)
reg2
plot(reg2)
summary(reg2)
rsq2 <- summary(reg2)$r.squared
rsq2
#0.2255 isn't the correlation between game score and game platform
sqrt(rsq2)
#the fitted values are the mean durations for each group
print(reg2$fitted)
#check the Pearson correlation between observed and fitted value
cor(score, reg2$fitted)
plot(x = reg2$fitted, y = score, xlab = 'Fitted score', ylab = 'Observed score')
abline(lm(score ~ reg2$fitted), col = 'red')
summary(reg2)
reg2 <- lm(score ~ genre, data = table)
reg2
summary(reg2)
rsq2 <- summary(reg2)$r.squared
rsq2
#0.921 isn't the correlation between game score and game genre
sqrt(rsq2)
sqrt(rsq2)
#the fitted values are the mean durations for each group
print(reg2$fitted)
#check the Pearson correlation between observed and fitted value
cor(score, reg2$fitted)
plot(x = reg2$fitted, y = score, xlab = 'Fitted score', ylab = 'Observed score')
abline(lm(score ~ reg2$fitted), col = 'red')
fit = aov(score ~ genre, data = table)
summary(fit)
install.packages('nortest')
by(score,platform,shapiro.test)
ss <- sample(data, size = 200, replace = FALSE)
install.packages('pwr')
library('pwr')
esize <- seq(0.1, 0.5, 0.01)
esize
nes <- length(esize)
samplesize <- NULL
for (i in 1:nes) {     result <- pwr.anova.test(k = 5, f = esize[i], sig.level = 0.05, power = 0.9)     samplesize[i]<-ceiling(result$n) }
plot(samplesize, esize, type = "l", lwd = 2, col = "black", ylab = 'effect size', xlab = 'sample size', maintainer = ' one way anova with power=0.90 and alpha= 0.05')
abline(v=200,col='red')
result
result
plot(samplesize, esize, type = "l", lwd = 2, col = "black", ylab = 'effect size', xlab = 'sample size', maintainer = ' one way anova with power=0.90 and alpha= 0.05')
plot(samplesize, esize, type = "l", lwd = 2, col = "black", ylab = 'effect size', xlab = 'sample size', maintainer = ' one way anova with power=0.90 and alpha= 0.05')
abline(h=200,col='red')
abline(v=200,col='red')
abline(v=200,h=null,col='red')
abline(v=200,h=NULL,col='red')
abline(v=200,h=0.13,col='red')
abline(v=200,h=0.12,col='red')
abline(v=200,h=0.125,col='black')
plot(samplesize, esize, type = "l", lwd = 2, col = "black", ylab = 'effect size', xlab = 'sample size', maintainer = ' one way anova with power=0.90 and alpha= 0.05')
abline(v=200,h=0.125,col='red')
result <- pwr.anova.test(n=200,k = 5, f = esize[i], sig.level = 0.05, power = 0.9)
pwr.anova.test(k = 5, n = 200, sig.level = 0.05, power = 0.9)
abline(v=200,h=0.1244102,col='red')
pwr.t.test(n = 200,d = 0.1244102,sig.level = 0.05,power = 0.9,type = 'two.sample',alternative = 'two,side')
pwr.t.test(n = 200,d = 0.1244102,sig.level = 0.05,power = 0.9,type = 'two.sample',alternative = 'two.sided')
pwr.t.test(n = 200,d = d,sig.level = 0.05,power = 0.9,type = 'two.sample',alternative = 'two.sided')
length(table)
length(score)
table[sample(18625,200)]
table[sample(nrow(table),200)]
data[sample(nrow(data),200)]
length(data)
data[sample(nrow(data),200),]
data[sample(nrow(),200),]
data[sample(nrow(data),200),]
data<-as.data.frame(data)
data[sample(nrow(data),200),]
newsample<-table[,c(1:200)]
newsample<-table[,c(1)]
newsample
newsample<-data[c(1),]
newsample
newsample<-data[c(1:200),]
newsample
head(data)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', stringsAsFactors = FALSE)
attach(table)
newsample<-table[c(1:200),]
newsample
data <- c('score', 'platform', 'genre')
data
data <- c(score, platform, genre)
data
data <- data.fram(score, platform, genre)
data <- data.frame(score, platform, genre)
head(data)
data<-data.frame(score,platform,genre)
newsample<-data[c(1:200),]
head(newsample)
sample<-sample(data,200)
sample<-sample(data,size=200)
sample<-sample(data[1:300],size=200)
sample<-sample(data[c(1:300)],size=200)
ss <- sample(score,genre, size = 200, replace = FALSE)
ss <- sample(score+genre, size = 200, replace = FALSE)
ss <- data[sample(nrow(data),200),]
head(ss)
data<-data.frame(score,platform,genre)
sampledata <- data[sample(nrow(data), 200),]
head(sampledata)
t.test(sampledata$score~sampledata$platform)
t.test(sampledata$score,sampledata$platform)
table <- read.csv('Z:/gongxiang/ign.csv', sep = ',', stringsAsFactors = FALSE)
attach(table)
install.packeges('qqnorm')
install.packages('qqnorm')
data<-data.frame(score,platform,genre)
sampledata <- data[sample(nrow(data), 200),]
head(sampledata)
p_value = function(x, y, z) {     x = data.frame(x)     y = data.frame(y)     c = nrow(x)     d = nrow(y)     colnames(x) = 'variable'     colnames(y) = 'variable'     a = data.frame(rep('A', c))     b = data.frame(rep('B', d))     colnames(a) = 'group'     colnames(b) = 'group'     data = data.frame(variable.names = rbind(x, y), group = rbind(a, b))     if (leveneTest(variable ~ group, data)$Pr[1] == 'NaN') {         print(NA)     } else {         if (leveneTest(variable ~ group, data)$Pr[1] > 0.05) {             t.test(x, y, paired = z)$p.value         } else {             wilcox.test(data[1:c, 1], data[(c + 1):(c + d), 1], paired = z)$p.value         }     } }
p_value(g1,g2,TRUE)
g1 <- sampledata$score
g2 <- sampledata$platform
g3<- sampledata$genre
p_value(g1,g2,TRUE)
library(levene)
install.packages('levene')
install.packages('car')
library(car)
p_value = function(x, y, z) {     x = data.frame(x)     y = data.frame(y)     c = nrow(x)     d = nrow(y)     colnames(x) = 'variable'     colnames(y) = 'variable'     a = data.frame(rep('A', c))     b = data.frame(rep('B', d))     colnames(a) = 'group'     colnames(b) = 'group'     data = data.frame(variable.names = rbind(x, y), group = rbind(a, b))     if (leveneTest(variable ~ group, data)$Pr[1] == 'NaN') {         print(NA)     } else {         if (leveneTest(variable ~ group, data)$Pr[1] > 0.05) {             t.test(x, y, paired = z)$p.value         } else {             wilcox.test(data[1:c, 1], data[(c + 1):(c + d), 1], paired = z)$p.value         }     } }
p_value(g1,g2,TRUE)
p_value(g1,factoe(g2),TRUE)
p_value(g1,factor(g2),TRUE)
g2 <- factor(sampledata$platform)
p_value(g1,g2,TRUE)
install.packages('chi-squared')
install.packages('chisq.test')
install.packages('chi-square')
install.packages('stats')
library(stats)
chisq.test(x = g1,y=g2)
myda<-xtabs(sampledata$score~sampledata$platform,data = sampledata)
chisq.test(myda)
myda
t.test(myda)
cor.test(myda)
chisq.test(score)
chisq.test(g1)
library(stats)
myda<-xtabs(sampledata$score~sampledata$platform,data = sampledata)
chisq.test(myda)
myda1 <- xtabs(sampledata$score ~ sampledata$genre, data = sampledata)
chisq.test(myda1)
pwr.t.test(n = 200,d = ,sig.level = 0.05,power = 0.9,type = 'two.sample',alternative = 'two.sided')
library(car)
library('pwr')
pwr.t.test(n = 200,d = ,sig.level = 0.05,power = 0.9,type = 'two.sample',alternative = 'two.sided')
